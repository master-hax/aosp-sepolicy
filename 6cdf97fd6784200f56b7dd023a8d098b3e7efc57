{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5e29d458_bf0b5bcc",
        "filename": "private/system_server.te",
        "patchSetId": 3
      },
      "lineNbr": 1488,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2024-04-04T19:58:25Z",
      "side": 1,
      "message": "why can\u0027t aconfigd do this (which appears to own this now), and what is the synchronization mechanism used to prevent these two processes from touching the same file?",
      "range": {
        "startLine": 1488,
        "startChar": 63,
        "endLine": 1488,
        "endChar": 69
      },
      "revId": "6cdf97fd6784200f56b7dd023a8d098b3e7efc57",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81173cf9_62984905",
        "filename": "private/system_server.te",
        "patchSetId": 3
      },
      "lineNbr": 1488,
      "author": {
        "id": 1981530
      },
      "writtenOn": "2024-04-04T20:06:29Z",
      "side": 1,
      "message": "This is a marker file that\u0027s only created and deleted by system_server, anything else only ever checks if the file exists. It gets created by SettingsProvider when a flag is enabled. The flag is stored in SettingsProvider, so SettingsProvider can do the flag lookup -\u003e file creation. aconfigd can\u0027t easily read the flag in SettingsProvider, as SP starts up later in the boot process.\n\naconfigd will never care about that particular file, system_server is the only one that interacts with it. aconfig_storage_metadata_file is the policy associated with the directory this marker file lives in. All of the other files in that directory are managed by aconfigd",
      "parentUuid": "5e29d458_bf0b5bcc",
      "range": {
        "startLine": 1488,
        "startChar": 63,
        "endLine": 1488,
        "endChar": 69
      },
      "revId": "6cdf97fd6784200f56b7dd023a8d098b3e7efc57",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52624f34_35426b8c",
        "filename": "private/system_server.te",
        "patchSetId": 3
      },
      "lineNbr": 1488,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2024-04-04T20:09:27Z",
      "side": 1,
      "message": "Here are where the aconfigd permissions to read/write that file are:\nhttps://cs.android.com/android/platform/superproject/main/+/main:system/sepolicy/private/aconfigd.te;l\u003d21;drc\u003da2b17ab856cb922b0e2e25ad54772502b7eb3997\n\nIf they are not needed there, can we remove them?",
      "parentUuid": "81173cf9_62984905",
      "range": {
        "startLine": 1488,
        "startChar": 63,
        "endLine": 1488,
        "endChar": 69
      },
      "revId": "6cdf97fd6784200f56b7dd023a8d098b3e7efc57",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17a940e5_cb6a401b",
        "filename": "private/system_server.te",
        "patchSetId": 3
      },
      "lineNbr": 1488,
      "author": {
        "id": 1981530
      },
      "writtenOn": "2024-04-04T20:12:40Z",
      "side": 1,
      "message": "`aconfig_storage_metadata_file` and the other are used for all files in these directories: https://cs.android.com/android/platform/superproject/main/+/main:system/sepolicy/private/file_contexts;l\u003d874?q\u003daconfig_storage_metadata_file\n\naconfigd reads/writes other files in this directory, system_server needs to write a different file in this same directory. The names for the policy are a bit confusing.\n\nThe marker file will only be used temporarily while we perform a migration, so we plan to remove system_server\u0027s access here once it\u0027s done",
      "parentUuid": "52624f34_35426b8c",
      "range": {
        "startLine": 1488,
        "startChar": 63,
        "endLine": 1488,
        "endChar": 69
      },
      "revId": "6cdf97fd6784200f56b7dd023a8d098b3e7efc57",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "318927ed_01dd807f",
        "filename": "private/system_server.te",
        "patchSetId": 3
      },
      "lineNbr": 1488,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2024-04-05T05:58:32Z",
      "side": 1,
      "message": "IIUC, Steven\u0027s concern is that this particular directory/selinux-context is intended to be fully owned/managed by aconfigd. It\u0027s generally better to not share ownership of directories/selinux-contexts this way because it makes it challenging to understand who owns what files, and makes it easy to cause mistakes where one process modifies/deletes/etc the files owned by another process. It\u0027s better to fully separate ownership and have that separation enforced by selinux. What you could do instead:\n\nHave init create a new directory for your use-case. This is what\u0027s done for other directories here:\nhttps://cs.android.com/search?q\u003d%2Fmetadata%2Faconfig%20init.rc\n\nAssign your new directory with a new selinux label and grant permissions to access it. See aosp/2960462 as an example",
      "parentUuid": "17a940e5_cb6a401b",
      "range": {
        "startLine": 1488,
        "startChar": 63,
        "endLine": 1488,
        "endChar": 69
      },
      "revId": "6cdf97fd6784200f56b7dd023a8d098b3e7efc57",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38397c43_df95de12",
        "filename": "private/system_server.te",
        "patchSetId": 3
      },
      "lineNbr": 1488,
      "author": {
        "id": 1981530
      },
      "writtenOn": "2024-04-05T14:00:54Z",
      "side": 1,
      "message": "Ack, thank you, makes sense. Done, added init.rc change to topic.",
      "parentUuid": "318927ed_01dd807f",
      "range": {
        "startLine": 1488,
        "startChar": 63,
        "endLine": 1488,
        "endChar": 69
      },
      "revId": "6cdf97fd6784200f56b7dd023a8d098b3e7efc57",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}